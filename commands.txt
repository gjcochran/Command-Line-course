date
//==> Wed Oct 26 17:01:37 MDT 2022
--
clear 
//==> clears current terminal window
can also type command-k 
--
ncal 
//==> prints out a calendar, can pass ncal parameters to print past year/month calendars
     October 2022      
Mo     3 10 17 24 31
Tu     4 11 18 25   
We     5 12 19 26   
Th     6 13 20 27   
Fr     7 14 21 28   
Sa  1  8 15 22 29   
Su  2  9 16 23 30  
--
cal 
//==>
 October 2022      
Su Mo Tu We Th Fr Sa  
                   1  
 2  3  4  5  6  7  8  
 9 10 11 12 13 14 15  
16 17 18 19 20 21 22  
23 24 25 26 27 28 29  
30 31  
--
echo argument
//==> argument
--
man 
//==> manual pages are built-in docs that explain how to use various commands 
ex 
> man ex_command  
type q to get out of the manual
scroll up/down w arrow keys
f or spacebar will go down one page, b will go back one page
/-option allows us to search within man pages
note that some commands have no man page, in which case they will have a help page and can use..
> help ex_command 
--
control-d will quit out of a running program
--
type
#==> tells us the type of a command, ie where or how it is defined, there are four types 
--
which
#==> tells us where the command is located (ex in what directory is located)
--

// NAVIGATING YOUR MACHINE //

pwd 
#==> print working directory command asks "where am i?" and will print the path of your current working directory starting from the root / 
--
ls
#==> the list command will list the contents of a directory.
with no options or arguments, it prints a list of the files and filters located in the current directory
ls path (ex. ls /Users/gcochran/Desktop OR ls Desktop) will list the contents of a specific directory
// useful ls options

ls -l #==> will give us the "long" format for the directory (ex. permissions, size, modification date, etc)

ls -a #==> will show us all files and folders including hidden files/folders (note that hidden files/folders start with a dot (ex. .cache))
--

// CREATING FILES/FOLDERS //

touch 
#==> provide a filename and that file will be created in the current directory 
- can create multiple files at once (ex. > touch ex1.txt ex2.txt)
- dont need to create the file in the current directory, just provide the path before the file name
--
- the file extension (ex. .txt would be the extension) in the name of the file is not what determines the file type.... (but need to have the correct file type in the name so that various applications know how to treat the file, ex. open a .pdf in a pdf viewer app)
- can use the filt command to determine file type (ex. .txt .pdf .jpg etc)

#
rules for naming files & folders

- stick to numbers, letters, underscores and dashes (use camelCase if one idea rather than having spaces); DONT USE ANY OTHER SYMBOLS 
- AVOID SPACES in names [have to use "" in order to use any commands in terminal for files/folders that are multiple words; or can escape the space with \; ex. file Launch\ School ]
#

mkdir 
#==> creates new folders (aka directories)
- like touch, can make multiple at once & create one outside the current directory by giving the path
mkdir -p #==> will make nested folders, ex...
  mkdir -p Horses/Mares (will create a horses folder and a mares folder inside of it)

# DELETING, COPYING & MOVING #

rm 
#==> deletes files from our machine
- note that cannot undo (unlike if we were to move a file to trash with GUI), does delete permanently 
rm file.txt #==> will delete file.txt if that file exists in the current directory 

- can delete multiple things at once, like many other commands previously discussed 
- like many other commands, can write the relative or absolute path to remove a file from another directory that are not currently in

rm -d FOLDER #==> will delete directories, if they are empty 
note that rmdir works the exact same as rm -d 
.. for both, only work on empty directories 

rm -r FOLDER #==> will delete the directory, recursively ie will delete all child folders/files of that directory therefore be careful with this command

can use rm -ri rather than rm -r #==> which protects against mistakes because will prompt user before deleting the folder 

--

mv 
#==> the move command moves files and directories from one location to another 
> mv source destination 
- note that have to provide paths... ofc 
- can move multiple files/folders at once 
- note that the destination folder has to exist, otherwise will rename or not work 
- if only want to move a file into the parent folder of current folder.. just do > mv file .. 

// to rename // 

> mv source newName 
- can only rename one thing at a time 
- can both rename and move to a new location at the same time .. just add path 
ex. > mv file.txt ~/Desktop/file2.txt [this renamed the file and moved it to my Desktop directory]

-- 

cp 
#==> copy command to create copies of files and folders
> cp file copyOfFile 
- can also move as am copying within the same command, just provide a destination path ex. ~/copyOfFile 
- to copy directories, need to copy all the contents of that folder, ie need to copy it recursively
> cp -r file copyOfFile 

-- 
history 
#==> will print all previous commands that have run 
history | less #==> view all commands in more manageable way, exit with q 

// history expansion 
> !linenumberofthecommandthatwantorerun

- can search through all previous commands in the history with ctrl-r and then type keywords [escape this search bar with down arrow]

-- 

cat 
#==> concatenates (ie joins multiple files together for the print) and prints/displays the contents of files in the terminal 
-- note that only works on text files ... can convert a pdf to text with command pdftotext and then view that 

--

less
#==> displays the contents of a file, one page at a time [use less rather than cat for long files as will be easier to view/scroll thru]
- can hit space bar to go through pages at a time [or any commands that use in manuals, as man uses less]
  - space || f to go to the next page of the file
  - b to go back to the previous page 
  - Enter or Down arrow to scroll by one line 
  - to search, type forward slash / followed by a pattern
  - quit the less window within terminal by hitting q 

--

tac 
#==> does same things as cat but prints the files in reverse, vertically (ie last line will be printed first, etc)

-- 
rev 
#==> prints the contents of the file, reversing the order, horizontally (ie reverses letters in all words on each line)

## note that cat, less, tac and rev dont modify the files themselves, just print them in various ways to our terminal console 

-- 

head 
#==> prints the first 10 lines of a file to our terminal 
is 10 by default, can write -n 12, for example, to print first 12 lines
|| can just write > head -12 file (don't need the -n before the number)

tail 
#==> prints the last 10 lines of a file to our terminal 
same as head, 10 is default.. and can use the -n option to change the number of lines to print 
option -f on tail ... with the follow option, the tail command will stay open and add any appends to the file as those edits are made... ex. this is useful to monitor logs 

-- 
wc 
#==> the word count command can tell us the number of words, lines, or bytes in files 
by default, prints out 3 numbers... the lines, words, and bytes in a file 

> wc -l #==> will only print the number of lines
> wc -w #==> will only print the number of words 
> wc -m #==> will only print the number of characters  
> wc -c #==> will only print the number of bytes 

--
sort 
#==> outputs the sorted contents of a file. by default, will sort the lines of a file alphabetically 
- the option -r will sort in reverse order
- option -n will sort numerically 
- option -u will ignore duplicate values and only sort unique values
- if file has columns, can use option -k columnnumber ex. > sort -k 2 file [otherwise will always sort by values in the first column, column 1]


------

tr
#==> will take text from standard input and change/translate text in a specified way 
[tr is one of several commands commonly used to transform text, other common ones are sed, awk, and mawk]

ex. 
cat msg [[ie a file named msg]] #==> she sells seashells by the seashore
cat msg | tr s S #=> She SellS SeaShellS by the SeaShore 
cat msg | tr a-z A-Z #==> SHE SELLS SEASHELLS BY THE SEASHORE 
cat msg | tr -d s #==> he ell eahell by the eahore 

--

du 
#==> disc usage 
du -ha FOLDER #==> will show the file sizes of all files in a folder 

-- 

tee 
#=> the tee program reads standard input and copies it to both standard output and to a file. this allows us to capture info part of the way thru a pipeline, w/o interrupting the flow 

ex. > command1 | tee file.txt | command2 
^^ command1 output will go to both file.txt and to command2 
























